Algorithm: 
The idea is to compute the value of a rotation using values of previous rotation. When an array is rotated by one, following changes happen in sum of i*arr[i]. 
Multiplier of arr[i-1] changes from 0 to n-1, i.e., arr[i-1] * (n-1) is added to current value.
Multipliers of other terms is decremented by 1. i.e., (cum_sum - arr[i-1]) is subtracted from current value where cum_sum is sum of all numbers.

Time Complexity: O(n). 
Since one loop is needed from 0 to n to check all rotations and the sum of the present rotation is calculated from the previous rotations in O(1) time).
Auxiliary Space: O(1). 
As no extra space is required to so the space complexity will be O(1)

class GfG
{
    int max_sum(int A[], int n){
        
     int sum=0;
     int currVal=0;
     for(int i=0;i<n;i++){
         sum+=A[i]; // 14
         currVal+=i*A[i]; // 11
     }
     int res=currVal; // res = 11
     for(int i=1;i<n;i++){
        
        int nextVal=currVal-(sum-A[i-1])+A[i-1]*(n-1); // 11-14+8*4 -- 29 , 29-14+3*4= 27
        // System.out.println(currVal);
        // System.out.println(nextVal);
        currVal=nextVal; // 29
        
        res=Math.max(res,nextVal); // 29
     }
     return res;
    }
}
