Time Complexity: O(V+E), where V is the number of nodes and E is the number of edges.
Auxiliary Space: O(V)

class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        
        boolean visited[]=new boolean[V];
        ArrayList<Integer> res=new ArrayList<Integer>();
        
        for(int i=0;i<V;i++){
            if(!visited[i]){
               Queue<Integer> queue = new LinkedList<Integer>();
              
               queue.add(i);
                visited[i]=true;
               
               while(!queue.isEmpty()){
                   int front=queue.poll();
                   res.add(front);
                   
                  // Iterator<Integer> side=adj.get(front).listIterator();
                   
                   for(int n: adj.get(front))
                   {
                       if(!visited[n]){
                           queue.add(n);
                           visited[n]=true;
                           
                       }
                   }
                   
               }
            }
        }
        
        return res;
    }
}
