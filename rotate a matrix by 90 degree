Given a square matrix, turn it by 90 degrees in anti-clockwise direction without using any extra space

Complexity Analysis:  

Time Complexity: O(n2) + O(n2)   where n is size of array.
Auxiliary Space: O(1). As a constant space is needed

Reverse every individual  row
Perform Transpose

class Solution
{
    static void rotate(int mat[][]) 
    {
     int N=mat[0].length;
     for (int i = 0; i < N; i++)
      Reverse(i,mat,N);

    // Performing Transpose
    for (int i = 0; i < N; i++) {
      for (int j = i; j < N; j++)
      {
        int temp=mat[i][j];
        mat[i][j]=mat[j][i];
        mat[j][i]=temp;
      }
    }
    
    
    
    }

    static void Reverse(int i,int mat[][], int N)
  {
    // Initialise start and end index
    int start = 0;
    int end = N - 1;

    // Till start < end, swap the element
    // at start and end index
    while (start < end) {

      // Swap the element
      int temp = mat[i][start];
      mat[i][start] = mat[i][end];
      mat[i][end] = temp;

      // Increment start and decrement
      // end for next pair of swapping
      start++;
      end--;
    }
  }

}
