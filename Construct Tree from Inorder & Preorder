Given 2 Arrays of Inorder and preorder traversal. The tree can contain duplicate elements. Construct a tree and print the Postorder traversal
Time Complexity: O(n^2), The worst case occurs when the tree is left-skewed. Example Preorder and Inorder traversals for worst-case are {A, B, C, D} and {D, C, B, A}. 
Auxiliary Space: O(n), The extra space used is due to the recursive call stack and the worst case occurs for a skewed tree.


class Solution
{
    
    static int preIndex=0;
    public static Node buildTree(int inorder[], int preorder[], int n)
    {
         int low=0;
         int high=n-1;
         preIndex=0;
         return buildInternal(inorder,preorder,low,high);
    }
    
    
    
    static Node buildInternal(int inorder[],int preorder[],int low , int high){
        
        if(low>high){
            return null;
        }
        
        Node tNode=new Node(preorder[preIndex++]);
        if(low==high) return tNode;
        int inIndex=search(inorder,low,high,tNode.data);
        tNode.left =buildInternal(inorder,preorder,low,inIndex-1);
        tNode.right=buildInternal(inorder,preorder,inIndex+1,high);
        return tNode;
    } 
    
    static int search(int inorder[],int strt, int end, int value){
        int i;
        for (i = strt; i <= end; i++) {
            if (inorder[i] == value)
                return i;
        }
        return i;
    }
}

Efficient Approach : 

We can optimize the above solution using hashing (unordered_map in C++ or HashMap in Java). We store indexes of inorder traversal in a hash table. So that search can be done O(1) time. 
Optimize to use hashmap for inorder:
Time Complexity: O(n)
Auxiliary Space: O(n), The extra space is used to store the elements in the map also due to recursive function call stack.


/* A binary tree node has data, pointer to left child 
and a pointer to right child */
class Node
{
  char data;
  Node left,right;
  Node(char item)
  {
    data = item;
    left = right = null;
  }
}
class Tree
{

  public static Node root;

  // Store indexes of all items so that we
  // we can quickly find later
  static HashMap<Character,Integer> mp = new HashMap<>();
  static int preIndex = 0;

  /* Recursive function to construct binary of size
    len from Inorder traversal in[] and Preorder traversal 
    pre[]. Initial values of inStrt and inEnd should be 
    0 and len -1. The function doesn't do any error 
    checking for cases where inorder and preorder 
    do not form a tree */
  public static Node buildTree(char[] in, char[] pre, int inStrt, int inEnd)
  {

    if(inStrt > inEnd)
    {
      return null;
    }

    /* Pick current node from Preorder traversal using preIndex 
        and increment preIndex */
    char curr = pre[preIndex++];
    Node tNode;
    tNode = new Node(curr);

    /* If this node has no children then return */
    if (inStrt == inEnd)
    {
      return tNode;
    }

    /* Else find the index of this node in Inorder traversal */
    int inIndex = mp.get(curr);

    /* Using index in Inorder traversal, construct left and 
        right subtress */
    tNode.left = buildTree(in, pre, inStrt, inIndex - 1);
    tNode.right = buildTree(in, pre, inIndex + 1, inEnd);
    return tNode;
  }

  // This function mainly creates an unordered_map, then
  // calls buildTree()
  public static Node buldTreeWrap(char[] in, char[] pre, int len)
  {
    for(int i = 0; i < len; i++)
    {
      mp.put(in[i], i);
    }
    return buildTree(in, pre, 0, len - 1);
  }

  /* This function is here just to test buildTree() */
  static void printInorder(Node node)
  {
    if(node == null)
    {
      return;
    }
    printInorder(node.left);
    System.out.print(node.data + " ");
    printInorder(node.right);
  }

  /* Driver code */ 
  public static void main (String[] args)
  {
    char[] in = {'D', 'B', 'E', 'A', 'F', 'C'};
    char[] pre = {'A', 'B', 'D', 'E', 'C', 'F'};
    int len = in.length;

    Tree.root=buldTreeWrap(in, pre, len);

    /* Let us test the built tree by printing 
        Inorder traversal */
    System.out.println("Inorder traversal of the constructed tree is");
    printInorder(root);
  }
}
