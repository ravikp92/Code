Time Complexity: O(n) where n is no of nodes in linked list

Auxiliary Space: O(1)


/* Node of a linked list
 class Node {
   int data;
    Node next;
    Node(int d)  { data = d;  next = null; }
}
*/

class Solution
{
    // Node head;
    
    // class Node{
    //     int data;
    //     Node next;
    //     public Node(int data){
    //         this.data=data;
    //         this.next=null;
    //     }
    // }
    
    // public void pushNode(int data){
    //     Node new_node=new Node(data);
    //     new_node.next=head;
    //     head=new_node;
    // }
    
    // public void printNode()
    // {
    //     Node temp=head;
    //     while(temp!=null){
    //         System.out.print(temp.data+"->");
    //         tmp=temp.next;
    //     }
    //     System.out.print("Null"+"\n");
    // }
    
    public int getLen(Node head){
        int length=0;
        Node temp=head;
        while(temp!=null){
            length++;
            temp=temp.next;
        }
        return length;
    }
    
    int getMiddle(Node head)
    {
        
         if(head!=null){
             int length =getLen(head);
             Node temp=head;
             int middleLength=length/2;
             while(middleLength!=0){
                 temp=temp.next;
                 middleLength--;
             }
             return temp.data;
             
         }
         return -1;
    }
}


or Another appproach:


void printMiddle()
    {
        Node slow_ptr = head;
        Node fast_ptr = head;
        
            while (fast_ptr != null && fast_ptr.next != null)
            {
                fast_ptr = fast_ptr.next.next;
                slow_ptr = slow_ptr.next;
            }
            System.out.println("The middle element is [" +
                                slow_ptr.data + "] \n");
        
