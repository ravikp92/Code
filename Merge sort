
class Solution
{
    void merge(int arr[], int l, int m, int r)
    {
         int temp[]=new int[r-l+1];
         int i=l, j=m+1;
         int pos=0;
         
        while(i<=m && j<=r){
            if(arr[i]<=arr[j]){
                temp[pos++]=arr[i++];
            }
            if(arr[j]<=arr[i]){
                temp[pos++]=arr[j++];
            }
        }
        
        while(i<=m){
            temp[pos++]=arr[i++];
        }
        while(j<=r){
            temp[pos++]=arr[j++];
        }
        
             for( i=0;i<pos;i++){
            arr[i+l]=temp[i];
        }


    }
    void mergeSort(int arr[], int l, int r)
    {
        if(l>=r) return;
        
        int mid=(l+r)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
}


Time Complexity: O(n log(n)),  Sorting arrays on different machines. Merge Sort is a recursive algorithm and time complexity can be expressed as following recurrence relation. 

T(n) = 2T(n/2) + θ(n)

The above recurrence can be solved either using the Recurrence Tree method or the Master method. It falls in case II of Master Method and the solution of the recurrence is θ(nLogn). The time complexity of Merge Sort is  θ(nLogn) in all 3 cases (worst, average and best) as merge sort always divides the array into two halves and takes linear time to merge two halves.
Auxiliary Space: O(n)

Space Complexity :

• In merge sort all elements are copied into an auxiliary array 
• so N auxiliary space is required for merge sort.
 

Algorithmic Paradigm: Divide and Conquer

Is Merge sort In Place?
 No in a typical implementation

Is Merge sort Stable: 
Yes, merge sort is stable. 

Applications of Merge Sort: 
Merge Sort is useful for sorting linked lists in O(nLogn) time. In the case of linked lists, the case is different mainly due to the difference in memory allocation of arrays and linked lists. Unlike arrays, linked list nodes may not be adjacent in memory. Unlike an array, in the linked list, we can insert items in the middle in O(1) extra space and O(1) time. Therefore, the merge operation of merge sort can be implemented without extra space for linked lists.
In arrays, we can do random access as elements are contiguous in memory. Let us say we have an integer (4-byte) array A and let the address of A[0] be x then to access A[i], we can directly access the memory at (x + i*4). Unlike arrays, we can not do random access in the linked list. Quick Sort requires a lot of this kind of access. In a linked list to access i’th index, we have to travel each and every node from the head to i’th node as we don’t have a contiguous block of memory. Therefore, the overhead increases for quicksort. Merge sort accesses data sequentially and the need of random access is low.
Inversion Count Problem
Used in External Sorting
Drawbacks of Merge Sort:
Slower comparative to the other sort algorithms for smaller tasks.
The merge sort algorithm requires an additional memory space of 0(n) for the temporary array.
It goes through the whole process even if the array is sorted.
Recent Articles on Merge Sort
Coding practice for sorting.
Quiz on Merge Sort
