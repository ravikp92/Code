Input:
N = 11 
M = 4
A1[] = {2, 1, 2, 5, 7, 1, 9, 3, 6, 8, 8}
A2[] = {2, 1, 8, 3}
Output: 
2 2 1 1 8 8 3 5 6 7 9
Explanation: Array elements of A1[] are
sorted according to A2[]. So 2 comes first
then 1 comes, then comes 8, then finally 3
comes, now we append remaining elements in
sorted order.
Example 2:

Input:
N = 11 
M = 4
A1[] = {2, 1, 2, 5, 7, 1, 9, 3, 6, 8, 8}
A2[] = {99, 22, 444, 56}
Output: 
1 1 2 2 3 5 6 7 8 8 9
Explanation: No A1[] elements are in A2[]
so we cannot sort A1[] according to A2[].
Hence we sort the elements in non-decreasing 
order.

Time complexity:
steps 1 and 2 on average take O(m+n) time under the assumption that we have a good hashing function that takes O(1) time for insertion and search on average. 
The third step takes O(p Log p) time where p is the number of elements remained after considering elements of A2[].
class Solution{
    // A1[] : the input array-1
    // N : size of the array A1[]
    // A2[] : the input array-2
    // M : size of the array A2[]
    
    //Function to sort an array according to the other array.
    public static int[] sortA1ByA2(int A1[], int N, int A2[], int M)
    {
        HashMap<Integer, Integer> mp=new HashMap<>();
        int [] ans=new int[N];
        int ind=0;
        for(int i=0;i<N;i++){
            if(!mp.containsKey(A1[i])){
                mp.put(A1[i],1);
            }else{
                mp.put(A1[i],mp.get(A1[i])+1);
            }
        }
   
            for(int i=0;i<M;i++){
                if(mp.containsKey(A2[i])){
                    for(int j=1;j<=mp.get(A2[i]);j++){
                        ans[ind++]=A2[i];
                    }
                }
            
            
            mp.remove(A2[i]);
        }
        for(HashMap.Entry<Integer,Integer> it: mp.entrySet()){
            for(int j=1;j<=it.getValue();j++){
                ans[ind++]=it.getKey();
            }
        }
        
        return ans;
    }
}
